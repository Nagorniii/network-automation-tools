from pynetbox import api
from dotenv import load_dotenv
from ipaddress import ip_network
import os

# ====== –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ NetBox ======
load_dotenv()
NETBOX_URL = os.getenv("NETBOX_URL")
NETBOX_TOKEN = os.getenv("NETBOX_TOKEN")
nb = api(NETBOX_URL, token=NETBOX_TOKEN)

# ================= –§—É–Ω–∫—Ü—ñ—ó =================

def view_prefixes():
    prefixes = nb.ipam.prefixes.all()
    if not prefixes:
        print("–ü—Ä–µ—Ñ—ñ–∫—Å—ñ–≤ –Ω–µ–º–∞—î.")
        return []
    print("\n–°–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤:")
    for p in prefixes:
        print(f"- {p.prefix} | {p.status} | {p.description}")
    return prefixes

def validate_prefix(prefix_str: str):
    try:
        return str(ip_network(prefix_str, strict=False))
    except ValueError:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ—Ñ—ñ–∫—Å—É.")
        return None


def create_prefix(prefix, description="–°—Ç–≤–æ—Ä–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º" ):
    prefix_valid = validate_prefix(prefix)
    if not prefix_valid:
        return None

    existing = nb.ipam.prefixes.get(prefix=prefix)
    if existing:
        print(f"‚ùå –ü—Ä–µ—Ñ—ñ–∫—Å {prefix} –≤–∂–µ —ñ—Å–Ω—É—î.")
        return existing
    created = nb.ipam.prefixes.create(prefix=prefix, description=description, status="active")
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–µ—Ñ—ñ–∫—Å {created.prefix}")
    return created


def create_ip_in_prefix(prefix_str, description="", dns_name="",  tags=None, ip_address=None, from_end=False):

    prefix = nb.ipam.prefixes.get(prefix=prefix_str)
    if not prefix:
        print(f"‚ùå –ü—Ä–µ—Ñ—ñ–∫—Å {prefix_str} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return None

    available = prefix.available_ips.list()
    selected_ip = None

    if ip_address:
        selected_ip = ip_address
    else:
        if not available:
            print(f"‚ö†Ô∏è –í—ñ–ª—å–Ω–∏—Ö IP –Ω–µ–º–∞—î —É {prefix_str}.")
            selected_ip = input("–í–≤–µ–¥—ñ—Ç—å IP –≤—Ä—É—á–Ω—É: ").strip()
        else:
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 IP –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ from_end
            shown = list(reversed(available[-5:])) if from_end else available[:5]
            direction = "–∑ –∫—ñ–Ω—Ü—è" if from_end else "–∑ –ø–æ—á–∞—Ç–∫—É"
            print(f"\n–í—ñ–ª—å–Ω—ñ IP ({direction}):")
            for ip in shown:
                print(f"- {ip['address']}")

            user_input = input("–í–≤–µ–¥—ñ—Ç—å IP –≤—Ä—É—á–Ω—É –∞–±–æ Enter –¥–ª—è –≤–∏–±–æ—Ä—É –ø–µ—Ä—à–æ—ó –∑ –ø–æ–∫–∞–∑–∞–Ω–∏—Ö: ").strip()
            selected_ip = user_input if user_input else shown[0]["address"]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è
    exists = nb.ipam.ip_addresses.get(address=selected_ip)
    if exists:
        print(f"‚ö†Ô∏è IP {selected_ip} –≤–∂–µ —ñ—Å–Ω—É—î.")
        return exists.address

    tags_payload = []
    if tags:
        for tag_name in tags:
            tag_name = tag_name.strip()
            if not tag_name:
                continue
            tag_obj = nb.extras.tags.get(name=tag_name)
            if not tag_obj:
                tag_obj = nb.extras.tags.create(name=tag_name)
            tags_payload.append({"id": tag_obj.id})

    created_ip = nb.ipam.ip_addresses.create(
        address=selected_ip,
        status="active",
        description=description,
        dns_name=dns_name,
        tags=tags_payload
    )
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ IP {created_ip.address}")
    return created_ip.address



# ================= –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é =================

def main_menu():


    while True:
        print("\n=== –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===")
        print("1. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –ø—Ä–µ—Ñ—ñ–∫—Å–∏")
        print("2. –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å")
        print("3. –î–æ–¥–∞—Ç–∏ –º–µ—Ä–µ–∂—É –¥–æ –ø—Ä–µ—Ñ—ñ–∫—Å—É")
        print("4. –î–æ–¥–∞—Ç–∏ IP")
        print("0. –í–∏—Ö—ñ–¥")

        choice = input("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ").strip()

        if choice == "1":
            view_prefixes()
        elif choice == "2":
            prefix_input = input("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–µ—Ñ—ñ–∫—Å: ").strip()
            description = input("–í–≤–µ–¥—ñ—Ç—å description:\n").strip()
            create_prefix(prefix_input, description=description)
        elif choice == "3":
            prefix_input_for_loopback = input("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–µ—Ñ—ñ–∫—Å –≤ —è–∫–æ–º—É –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ loopback: ").strip()
            description_input = input("–í–≤–µ–¥—ñ—Ç—å description:\n").strip()
            dns_input = input("–í–≤–µ–¥—ñ—Ç—å dns: ").strip()
            a=create_ip_in_prefix(
                prefix_input_for_loopback,
                description_input,
                'rt' + dns_input + '.mgmt',
                tags=["router","wh"]
            )
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–∞ –Ü–† {a}")
            ip_part, mask = a.split('/')
            octets = ip_part.split('.')

            # –∑—Ä–æ–±–∏–º–æ –∫–æ–ø—ñ—é, —â–æ–± –Ω–µ –ø–ª—É—Ç–∞—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
            swapped = octets.copy()
            swapped[2], swapped[3] = swapped[3], swapped[2]
            new_prefix = '.'.join(swapped)

            # –Ω–∞ –±–∞–∑—ñ —Ç—ñ—î—ó –∂ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî —ñ–Ω—à–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è
            sw_for_prefix = swapped.copy()
            sw_for_prefix[3] = '224'
            new_prefix_for_sw = '.'.join(sw_for_prefix)
            print(new_prefix)
            print(new_prefix_for_sw)
            create_prefix(new_prefix + '/24', description=description_input)
            create_prefix(new_prefix_for_sw + '/27', description=f"{description_input} [vlan773]")
            create_ip_in_prefix(
                new_prefix_for_sw + '/27',
                description_input,
                'sw0' + dns_input,
                tags=["switch", "wh"],
                from_end=True)
            create_ip_in_prefix(
                "172.24.64.0/19" ,
                description_input,
                'rt' + dns_input + '.mgmt',
                tags=[""]
            )
            create_ip_in_prefix(
                "172.24.192.0/19",
                description_input,
                'rt' + dns_input + '.mgmt',
                tags=[""]
            )
        elif choice == "4":
            prefix_input = input("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–µ—Ñ—ñ–∫—Å: ").strip()
            create_ip_in_prefix(prefix_input)
        elif choice == "0":
            print("–í–∏—Ö—ñ–¥...")
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


# ================= –ó–∞–ø—É—Å–∫ =================
if __name__ == "__main__":
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\nüö™ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
    except Exception as e:
        print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
